/// <reference types="node" />
import { PacketType } from './mqtt.constants';
import { Transform, TransformCallback } from 'stream';
import { Debugger } from 'debug';
import { DefaultPacketReadResultMap, PacketReadMap, PacketReadResultMap } from './packets/packet-reader';
export interface MqttParseResult<ReadMap extends PacketReadResultMap, T extends PacketType> {
    type: T;
    flags: number;
    data: ReadMap[T];
}
export interface MqttTransformerOptions<T extends PacketReadResultMap = DefaultPacketReadResultMap> {
    debug?: Debugger;
    mapping?: PacketReadMap<T>;
}
export declare class MqttTransformer<ReadMap extends PacketReadResultMap = DefaultPacketReadResultMap> extends Transform {
    options: MqttTransformerOptions<ReadMap>;
    mapping: PacketReadMap<ReadMap>;
    private internalStream;
    constructor(options?: MqttTransformerOptions<ReadMap>);
    _transform(chunk: Buffer, encoding: string, callback: TransformCallback): void;
    reset(): void;
}
