"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TlsTransport = void 0;
const transport_1 = require("./transport");
const tls_1 = require("tls");
const errors_1 = require("../errors");
class TlsTransport extends transport_1.Transport {
    constructor(options) {
        super(options);
        this.reset();
    }
    reset() {
        if (this.duplex && !this.duplex.destroyed)
            this.duplex.destroy();
        this.duplex = undefined;
    }
    connect() {
        return new Promise((res, rej) => {
            if (this.duplex)
                // this.duplex has to be undefined
                return rej(new errors_1.IllegalStateError('TlsTransport still connected - cannot overwrite this.duplex'));
            this.duplex = tls_1.connect({
                ...this.options.additionalOptions,
                host: this.options.host,
                port: this.options.port,
            }, () => {
                res();
            });
        });
    }
}
exports.TlsTransport = TlsTransport;
//# sourceMappingURL=tls.transport.js.map