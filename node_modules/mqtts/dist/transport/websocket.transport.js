"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebsocketTransport = void 0;
const transport_1 = require("./transport");
const WebSocket = require("ws");
const errors_1 = require("../errors");
class WebsocketTransport extends transport_1.Transport {
    constructor(options) {
        super(options);
        this.reset();
    }
    reset() {
        if (this.socket)
            this.socket.close();
        if (this.duplex && !this.duplex.destroyed)
            this.duplex.destroy();
        this.socket = undefined;
        this.duplex = undefined;
    }
    connect() {
        if (this.socket || this.duplex)
            throw new errors_1.IllegalStateError('WebSocket still connected.');
        this.socket = new WebSocket(this.options.url, this.options.additionalOptions);
        this.duplex = WebSocket.createWebSocketStream(this.socket, { objectMode: true });
        const socket = this.socket;
        const duplex = this.duplex;
        return new Promise((resolve, reject) => {
            socket.once('open', () => {
                resolve();
                duplex.removeAllListeners('error');
            });
            duplex.once('error', e => {
                reject(e);
                socket.removeAllListeners('open');
            });
        });
    }
}
exports.WebsocketTransport = WebsocketTransport;
//# sourceMappingURL=websocket.transport.js.map