"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SubscribeReturnCode = exports.readSubscribeResponsePacket = exports.SubscribeResponsePacket = void 0;
const mqtt_packet_1 = require("../mqtt.packet");
const errors_1 = require("../errors");
class SubscribeResponsePacket extends mqtt_packet_1.IdentifierPacket {
    constructor(identifier, returnCodes) {
        super(identifier);
        this.returnCodes = returnCodes;
    }
    get anyError() {
        return !this.returnCodes.every(x => x !== SubscribeReturnCode.Fail);
    }
}
exports.SubscribeResponsePacket = SubscribeResponsePacket;
function readSubscribeResponsePacket(stream, remainingLength) {
    const identifier = stream.readWord();
    const returnCodes = Array.from(stream.read(remainingLength - 2));
    if (!returnCodes.every(code => code === SubscribeReturnCode.MaxQoS0 ||
        code === SubscribeReturnCode.MaxQoS1 ||
        code === SubscribeReturnCode.MaxQoS2 ||
        code === SubscribeReturnCode.Fail)) {
        throw new errors_1.MalformedPacketError('Received invalid return codes');
    }
    return new SubscribeResponsePacket(identifier, returnCodes);
}
exports.readSubscribeResponsePacket = readSubscribeResponsePacket;
var SubscribeReturnCode;
(function (SubscribeReturnCode) {
    SubscribeReturnCode[SubscribeReturnCode["MaxQoS0"] = 0] = "MaxQoS0";
    SubscribeReturnCode[SubscribeReturnCode["MaxQoS1"] = 1] = "MaxQoS1";
    SubscribeReturnCode[SubscribeReturnCode["MaxQoS2"] = 2] = "MaxQoS2";
    SubscribeReturnCode[SubscribeReturnCode["Fail"] = 128] = "Fail";
})(SubscribeReturnCode = exports.SubscribeReturnCode || (exports.SubscribeReturnCode = {}));
//# sourceMappingURL=subscribe.response.packet.js.map