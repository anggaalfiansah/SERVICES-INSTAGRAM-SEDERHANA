import { PacketType } from '../mqtt.constants';
import { PacketStream } from '../packet-stream';
import { ConnectResponsePacket } from './connect.response.packet';
import { PublishRequestPacket } from './publish.request.packet';
import { PublishAckPacket } from './publish.ack.packet';
import { PublishReleasePacket } from './publish.release.packet';
import { PublishReceivedPacket } from './publish.received.packet';
import { PublishCompletePacket } from './publish.complete.packet';
import { SubscribeResponsePacket } from './subscribe.response.packet';
import { UnsubscribeResponsePacket } from './unsubscribe.response.packet';
import { PingResponsePacket } from './ping.response.packet';
import { PingRequestPacket } from './ping.request.packet';
export declare type PacketReadResultMap = {
    [x in PacketType]: unknown;
};
export declare type PacketReadMap<Results extends PacketReadResultMap> = {
    [P in PacketType]?: (stream: PacketStream, remainingLength: number, flags: number) => Results[P];
};
export interface DefaultPacketReadResultMap extends PacketReadResultMap {
    [PacketType.ConnAck]: ConnectResponsePacket;
    [PacketType.Publish]: PublishRequestPacket;
    [PacketType.PubAck]: PublishAckPacket;
    [PacketType.PubRel]: PublishReleasePacket;
    [PacketType.PubRec]: PublishReceivedPacket;
    [PacketType.PubComp]: PublishCompletePacket;
    [PacketType.SubAck]: SubscribeResponsePacket;
    [PacketType.UnsubAck]: UnsubscribeResponsePacket;
    [PacketType.PingResp]: PingResponsePacket;
    [PacketType.PingReq]: PingRequestPacket;
}
export declare const DefaultPacketReadMap: PacketReadMap<DefaultPacketReadResultMap>;
