"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeFlags = exports.writeConnectPacket = void 0;
const errors_1 = require("../errors");
const mqtt_utilities_1 = require("../mqtt.utilities");
function writeConnectPacket(stream, options) {
    // Variable Header
    stream
        .writeString(options.protocolName)
        .writeByte(options.protocolLevel)
        .writeByte(makeFlags(options))
        .writeWord(options.keepAlive);
    // Payload
    stream.writeString(options.clientId);
    options.will && stream.writeString(options.will.topic).writeRawAndLength(mqtt_utilities_1.toBuffer(options.will.message));
    options.username && stream.writeString(options.username);
    options.password && stream.writeRawAndLength(mqtt_utilities_1.toBuffer(options.password));
    return {};
}
exports.writeConnectPacket = writeConnectPacket;
function makeFlags(options) {
    var _a;
    if (!options)
        return 0;
    if (mqtt_utilities_1.notUndefined(options.password) && !mqtt_utilities_1.notUndefined(options.username))
        throw new errors_1.MalformedPacketError('MQTT-3.1.2-22 If the User Name Flag is set to 0, the Password Flag MUST be set to 0');
    let flags = 0;
    if (mqtt_utilities_1.notUndefined(options.username))
        flags |= 0x1 << 7;
    if (mqtt_utilities_1.notUndefined(options.password))
        flags |= 0x1 << 6;
    if (mqtt_utilities_1.notUndefined(options.will)) {
        if (options.will.retained)
            flags |= 0x1 << 5;
        flags |= (((_a = options.will.qosLevel) !== null && _a !== void 0 ? _a : 0) & 0x03) << 3;
        flags |= 0x1 << 2;
    }
    if (options.clean)
        flags |= 0x1 << 1;
    return flags;
}
exports.makeFlags = makeFlags;
//# sourceMappingURL=connect.request.packet.js.map